# docker-compose.yml
version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  server:
    build: ./server
    ports:
      - "8085:8085"
    volumes:
      - ./common:/app/common
    command: ["python", "server.py"]

  client1:
    build: ./client1
    environment:
      - CLIENT_ID=1
    volumes:
      - ./common:/app/common
      - ./data:/data 
    depends_on:
      - kafka
      - server
    command: ["python", "client.py"]

  client2:
    build: ./client1
    environment:
      - CLIENT_ID=2
    volumes:
      - ./common:/app/common
      - ./data:/data 
    depends_on:
      - kafka
      - server
    command: ["python", "client.py"]

  client3:
    build: ./client1
    environment:
      - CLIENT_ID=3
    volumes:
      - ./common:/app/common
      - ./data:/data 
    depends_on:
      - kafka
      - server
    command: ["python", "client.py"]

  producer:
    build: ./producer
    volumes:
      - ./producer:/app
      - ./common:/app/common
      - ./data:/data
    depends_on:
      - kafka
    command: ["python", "producer.py"]
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.13.0
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlflow/mlruns
    command: > 
      mlflow server --backend-store-uri sqlite:///mlflow.db 
      --default-artifact-root /mlflow/mlruns 
      --host 0.0.0.0
